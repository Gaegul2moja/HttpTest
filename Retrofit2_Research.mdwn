# Retrofit 2
> [실습한 GITHUB 링크](https://github.com/Gaegul2moja/HttpTest)를 기반으로 조사하였습니다.

## OkHttp, Retrofit, Volley의 등장 배경
한때 HttpUrlConnection 이나 HttpsUrlConnection을 NetworkManager class에 넣고 AsyncTask로 접근하는 방식을 사용했었다. 

해당 방법은 HttpUrlConnection을 이용해 연결하고, Buffer을 통한 입출력을 하고, 예외처리 등의 필요해 개발자가 많은 부분들을 신경써야 해 실수할 가능성이 컸다.

그러나, OkHttp, Retrofit, Volley의 등장으로 더 간편해지게 되었다.

<hr/>

## OkHttp3
OkHttp는 서버와 HTTP, HTTP/2 프로토콜 통신을 위한 클라이언트 라이브러리이다.
- Square에서 제공하는 오픈소스로, 동기/비동기 방식을 각각 제공해서 개발자가 선택하여 사용할 수 있도록 한다.
### 장점
- Interceptor 처리하는 것이 간편하다
    - Application Interceptor : Application과 OKHttp 사이에 Request, Responses 정보를 intercept해서 추가적으로 처리한다.
    - Network Interceptors : Network와 OkHttp 사이에 Requests, Response 정보를 intercept 하여 추가적으로 처리한다.
- 기본 설정값 : 강력한 기본 값들이 잘 설정되어있다.

### 구현
- 아래와 같은 형식으로 data를 post로 보낸다.
```java
OkHttpClient client = new OkHttpClient();

String post(String url, String json) throws IOException {
  RequestBody body = RequestBody.create(json, JSON);
  Request request = new Request.Builder()
      .url(url)
      .post(body)
      .build();
  try (Response response = client.newCall(request).execute()) {
    return response.body().string();
  }
}
```

<hr/>

## Retrofit
Retrofit은 type-safe한 HTTP 클라이언트 라이브러리이다.
- Retrofit은 OkHttp 클라이언트를 디폴트로 선언해 그 위에서 동작한다.
> **type-safe란 ?** 
 어떠한 연산/오퍼레이션도 정의되지 않은 결과를 내놓지 않는 것. 즉, 예측가능한 결과만 내는 것을 말한다.

### 장점
- 어떤 Http client든 원하는 것을 어느것이든 쓸 수 있다. (Apache Http client, URL, OkHttp, 커스텀 등)
- 플러그형 시리얼라이제이션으로, JSON 사용시, Jackson으로 교체할 수 있다.

### 구현
## GET
```java
public interface GitHubService {
    @GET("repos/{owner}/{repo}/contributors")
    Call<List<RetrofitTestActivity.Contributor>> repoContributors(
            @Path("owner") String owner,
            @Path("repo") String repo);

    public static final Retrofit retrofit = new Retrofit.Builder()
            .baseUrl("https://api.github.com/")
            .addConverterFactory(GsonConverterFactory.create())
            .build();
}

...

GitHubService gitHubService = GitHubService.retrofit.create(GitHubService.class);
        Call<List<Contributor>> call = gitHubService.repoContributors("square", "retrofit");
        call.enqueue(new Callback<List<Contributor>>() {
            @Override
            public void onResponse(Call<List<Contributor>> call, Response<List<Contributor>> response) {
                retrofitTestTV.setText(response.body().toString());
            }

            @Override
            public void onFailure(Call<List<Contributor>> call, Throwable t) {

            }
        });
```

## JSON PARSE를 이용한 예제
[JSON 과 Retrofit](http://jsonplaceholder.typicode.com/)
### GET
- JsonPlaceHolderApi : 전체 조회
- JsonPlaceHolderByIdApi : 검색 조회
- Post : post 데이터
- JsonTestActivity

<hr/>

## Volley
### 장점
- 네트워크 요청의 자동 스케줄링
- 동시 네트워크 연결
- 요청 우선순위 지원
- 취소 요청 API, 단일 요청을 취소하거나 취소 블록 또는 범위를 설정할 수 있다.
- 재시도 및 백오프와 같은 사용자 지정 용이성
-  디버깅 및 추적 도구

### 구현
```java
StringRequest stringRequest = new StringRequest(Request.Method.GET, url, new Response.Listener<String>() {
            @Override
            public void onResponse(String response) {
                textView.setText(response);
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                Log.e("TEST", "ERROR : " + error.getMessage());
            }
        });
```
<hr/>

## 비교
- 둘다 "Callback"을 재공할 수 있으며, 비동기 네트워크 호출이 완료되면 메소드 중 하나가 기본스레드에서 호출된다.
- API 엔드포인트를 지정하는 방법, 얻는 방법
    - Volley 사용
        - API 호출 시, 전체 엔드 포인트를 동적으로 지정할 수 있다. 
        - JSON Object 또는 JSON Array를 요청에 따라 반환한다.
    - Retrofit 사용
        - API 호출에 대한 기본 엔드포인트 url을 지정한 다음, JAVA annotaion을 이용해 엔드포인트를 지정하는 정적 인터페이스를 빌드
        - GSON을 사용하여 자동으로 JSON 구문 분석을 수행
        - 속도가 빠르다
- Retrofit이 API의 사용에서 오류, 캐싱, 페이징을 자동으로 처리하기 복잡하지 않다.
- 응답 시간 비교
<img src="https://user-images.githubusercontent.com/38804451/76816654-1a81cb00-6844-11ea-9004-15368762b9b3.png" height="200px" />



## 참고 링크
- [Advanced Networking : when Retrofit is not enough](https://proandroiddev.com/advanced-networking-when-retrofit-is-not-enough-316a897ddf40)

- [기상청에서 날씨 받아오기](https://wkdgusdn3.tistory.com/entry/Android-%EA%B8%B0%EC%83%81%EC%B2%AD%EC%97%90%EC%84%9C-%EB%82%A0%EC%94%A8-%EB%B0%9B%EC%95%84%EC%98%A4%EA%B8%B0)

- [OkHttp](https://square.github.io/okhttp/)

- [Android Async Http Clients: Volley vs Retrofit](https://jongmin92.github.io/2018/01/29/Programming/android-retrofit2-okhttp3/)

- [Retrofit](https://square.github.io/retrofit/)

- [Retrofit 예제](https://yoo-hyeok.tistory.com/79)

- [Retrofit 예제](https://korkang91.tistory.com/4)

- [Volley vs Retrofit ](http://www.codeplayon.com/2019/04/android-volley-vs-retrofit-better-approach/) -> 이 라인 이후로 한번 더 보세요

- [어플리케이션의 HTTP 라이브러리를 Volley에서 Retrofit2로 교체한 후기](https://zerodice0.tistory.com/196)

- [안드로이드 Retrofit 예제](https://cishome.tistory.com/136?category=765807)


# Retrofit 전환 가능성
- 여러개 조회 (버킷 및 아이템 등에서 사용되었던 것으로 기억)
    - getPost(@Query("...") int ..., @Query("...") int ..., @Query("...") int ..., @Query("...") int ...) 처럼 여러 파라미터를 넣을 수 있다
    - getPost(@Query("...") Integer[] ...); 도 같다
    - 맵을 이용해 sorting 기준 및, desc 등의 옵션을 넣을 수 있다
    ```java
    Map<String, String> map = new HashMap<>();
        map.put("userId", "5");
        map.put("_sort", "id");
        map.put("_order", "desc");
    ```

# NcPlatformSDK BaseHttpRequest
```java
public class BaseHttpRequest {
    ...

    /**
     * onStart
     */
    protected void onStart() {

    }

    public interface Listener {
        void onResponse(HttpResponse response);

        void onError(HttpResponse response);
    }

    public enum ResponseType {
        object, array,
    }

    public class RequestType {
        public static final int jwt = 0x01;      // Authorization이 JWT인 경우
        public static final int bearer = 0x02;   // Authorization이 Bearer인 경우
        public static final int header = 0x10;   // 파라미터가 JWT Header에 포함되는 경우
        public static final int body = 0x20;     // 파라미터가 Body에 들어가는 경우
    }

    public BaseHttpRequest(int method, String url, JSONObject params, NcAccessToken accessToken, Integer requestType, ResponseType responseType, int timeout, Listener listener) {
        mTxId = mMaxTransactionId.getAndIncrement();
        mMethod = method;
        mUrl = url;
        mParams = params;
        if (requestType == null) {
            mRequestType = RequestType.jwt | RequestType.header;
        } else {
            mRequestType = requestType;
        }
        mAccessToken = accessToken;
        mListener = listener;

        if (responseType == null) {
            mResponseType = ResponseType.object;
        } else {
            mResponseType = responseType;
        }

        mTimeout = timeout;
        mResponseHandler = new HttpResponseHandler(this);

        // host가 없으면 api url를 쓰도록 되어있던 코드를
        // 기본적으로 api url을 쓰도록 생성자에서 지정하고
        // host를 변경이 필요한 경우 setHost()를 이용하여 변경하도록 한다.
        mHost = NcEnvironment.get().getApiUrl();
        mAppId = NcPlatformSdk.getAppIdInternal();
        mAppSignature = NcPlatformSdk.getAppSignatureInternal();
        mResponseServerDate = null;

        switch (method) {
            case 0:
                mMethodString = "GET";
                break;
            case 1:
                mMethodString = "POST";
                break;
            case 2:
                mMethodString = "PUT";
                break;
            case 3:
                mMethodString = "DELETE";
                break;
            default:
                mMethodString = "DEPRECATED_GET_OR_POST";
                break;
        }
    }

    ...//set, get

    /**
     * getRequestQueue
     *
     * @return
     */
    private RequestQueue getRequestQueue() {
        // 반복 사용 시, 재생성하지 않게 static으로 처리
        if (mRequestQueue == null) {
            mRequestQueue = Volley.newRequestQueue(NcPlatformSdk.getApplicationContext());
        }
        return mRequestQueue;
    }

    /**
     * Map에서 사용할 RequestQueue
     *
     * @return
     */
    private RequestQueue getMapRequestQueue() {
        // 반복 사용 시, 재생성하지 않게 static으로 처리
        if (mMapRequestQueue == null) {
            mMapRequestQueue = Volley.newRequestQueue(NcPlatformSdk.getApplicationContext());
        }
        return mMapRequestQueue;
    }

    public void execute(MetaData meta) {
        mMetaData = meta;
        executeRequestInternal(getRequestQueue());
    }

    public void executeMapRequest(MetaData meta) {
        mMetaData = meta;
        executeRequestInternal(getMapRequestQueue());
    }

    private void executeRequestInternal(RequestQueue queue) {
        // host가 비어있는 경우 에러를 리턴해준다
        if (TextUtils.isEmpty(mHost)) {
            String message = "Http host is not set.";
            LogUtils.e(TAG, message);
            if (mListener != null) {
                NcJSONObject errorJson = NcError.buildErrorJsonObject(NcError.Error.NOT_SET_SERVER_URL, message);
                HttpResponse errorResponse = new HttpResponse(this, null, errorJson);

                mListener.onError(errorResponse);
            }
            return;
        }

        // onStart
        this.onStart();
        doApiRequest(queue, mMethod, mUrl, mParams, mAccessToken);
    }

    private StringRequest doApiRequest(RequestQueue requestQueue, int method, String url, final JSONObject params, final NcAccessToken accessToken) {
        // volley는 내부적으로 쓰레드에서 동작
        // DEV모드일 경우에는 URL을 변경한다.
        url = mHost + url;

        StringRequest request = new StringRequest(method, url, mResponseHandler, mResponseHandler) {
            @Override
            public byte[] getBody() throws AuthFailureError {
                if (params != null && hasFlagBit(RequestType.body)) {
                    try {
                        return params.toString().getBytes("UTF-8");
                    } catch (UnsupportedEncodingException e) {
                        LogUtils.e(TAG, "UnsupportedEncodingException : ", e);
                    }
                }
                return null;
            }

            @Override
            public String getBodyContentType() {
                return "application/json; charset="+DEFAULT_ENCODING;
            }

            @Override
            protected Response<String> parseNetworkResponse(NetworkResponse response) {
                try {
                    String date = response.headers.get(HTTP_DATE_HEADER);
                    log("parseNetworkResponse headers getDate : ", date);
                    mResponseServerDate = date;

                } catch (Exception e) {
                    LogUtils.e(TAG, "parseNetworkResponse Exception: ", e);
                }
                return super.parseNetworkResponse(response);
            }

            @Override
            public Map<String, String> getHeaders() throws AuthFailureError {
                String authorization = null;
                Map<String, String> headers = new HashMap<>();

                JSONObject newParams = null;
                if (hasFlagBit(RequestType.header)) {
                    newParams = params;
                }

                if (hasFlagBit(RequestType.jwt)) {
                    authorization = HttpHelper.buildJwtHeader(accessToken, (newParams == null) ? new JSONObject() : newParams, mAppId, mAppSignature);
                } else if (hasFlagBit(RequestType.bearer)) {
                    authorization = HttpHelper.buildBearerHeader(accessToken.getValue());
                }

                headers.put(HttpHeaderKeys.AUTHORIZATION, authorization);
                headers.put(HttpHeaderKeys.CHARSET, DEFAULT_ENCODING);
                headers.put(HttpHeaderKeys.USER_AGENT, HttpHelper.buildUserAgent());
                headers.put(HttpHeaderKeys.ACCEPT_ENCODING, "identity");
                headers.put(HttpHeaderKeys.ACCEPT_LANGUAGE, NcPlatformSdk.getLanguageCodeInternal());

                log("API Authorization", authorization);
                log("API User-Agent", HttpHelper.buildUserAgent());
                log("API Accept-Language", NcPlatformSdk.getLanguageCodeInternal());

                if (ConsoleManager.get().getActivationStatus()) {
                    headers.put(HttpHeaderKeys.X_B3_TRACEID, Utils.getRandomHexString(16));
                    headers.put(HttpHeaderKeys.X_B3_SPANID, Utils.getRandomHexString(8));
                    headers.put(HttpHeaderKeys.X_B3_SAMPLED, BIT_TRACE_SAMPLED);

                    log("API X_B3_TRACEID", headers.get(HttpHeaderKeys.X_B3_TRACEID));
                    log("API X_B3_SPANID", headers.get(HttpHeaderKeys.X_B3_SPANID));
                    log("API X_B3_SAMPLED", headers.get(HttpHeaderKeys.X_B3_SAMPLED));
                }
                return headers;
            }
        };

        log("API URL", url);
        log("API Method", String.valueOf(method));
        log("API Params", params == null ? "" : params.toString());


        JSONObject logJson = new JSONObject();
        try {
            logJson.put("header", new JSONObject(request.getHeaders()));
            logJson.put("body", params);
        } catch (JSONException e) {

        } catch (AuthFailureError e) {

        }

        if (ApiLogManager.get().isActive(mMetaData)) {
            mLogSequenceId = mMetaData.nextLogSequenceId();
            ApiLogManager.get().npLogStart(mLogSequenceId, getApiGroupName(), mMethodString + "|" + mHost + mUrl, logJson, mMetaData);
        }

        request.setShouldCache(false);
        request.setRetryPolicy(buildRetryPolicy(mTimeout, mRetryCount, 0));    // 백오프 정책 사용 안함
        requestQueue.add(request);

        return request;
    }

    public HttpResponse onResponse(NcJSONObject data, NcJSONObject error) {
        HttpResponse response = null;
        if (error != null) {
            response = new HttpResponse(this, null, error);

            if (response != null && ApiLogManager.get().isActive(mMetaData))
                ApiLogManager.get().npLogEnd(mLogSequenceId, getApiGroupName(), mMethodString + "|" + mHost + mUrl, false, response.getError(), mMetaData);

            if (mListener != null) {
                mListener.onError(response);
            }

        } else {
            response = new HttpResponse(this, data, null);

            if (response != null && ApiLogManager.get().isActive(mMetaData))
                ApiLogManager.get().npLogEnd(mLogSequenceId, getApiGroupName(), mMethodString + "|" + mHost + mUrl, true, response.getData(), mMetaData);

            if (mListener != null) {
                mListener.onResponse(response);
            }
        }

        return response;
    }

    ...
```

##### 마지막 링크꺼 부터 시작해서 Retrofit의 POST, DELETE 등의 사용 보기부터 하면됨 (POST부터)